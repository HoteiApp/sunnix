name: Compile and Deploy - Weeks Task

on:
  push:
    branches: [ "testing", "pro" ]
    paths:
      - 'tasks/weeks/**'
  workflow_dispatch:
    inputs:
      deploy_to_server:
        description: 'Deploy to server'
        required: true
        type: boolean
        default: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.2'

    - name: Debug Info
      working-directory: ./tasks/weeks
      run: |
        pwd
        ls -la
        go version
        cat go.mod

    - name: Download dependencies
      working-directory: ./tasks/weeks
      run: |
        go mod tidy

    - name: Build
      working-directory: ./tasks/weeks
      run: |
        echo "Iniciando compilación..."
        sudo go build -v -buildmode=plugin -trimpath -o weeks.task main.go
        echo "Compilación completada"
        ls -la weeks.task

    - name: Deploy Weeks Task to Server
      if: ${{ github.event_name == 'push' || github.event.inputs.deploy_to_server == 'true' }}
      env:
        PRIVATE_KEY: ${{ github.ref == 'refs/heads/pro' && secrets.SSH_PRIVATE_KEY_PRO || secrets.SSH_PRIVATE_KEY_TEST }}
        HOSTNAME: ${{ github.ref == 'refs/heads/pro' && secrets.IP_ADDRESS_PRO || secrets.IP_ADDRESS_TEST }}
        USER_NAME: ${{ secrets.USER_NAME }}
        CALLED_BY_DEPLOY_CENTER: ${{ github.event.inputs.called_by_deploy_center }}
      run: |
        echo "Desplegando en rama ${{ github.ref }} a servidor $HOSTNAME"
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        scp -o StrictHostKeyChecking=no -i private_key.pem ./tasks/weeks/weeks.task $USER_NAME@$HOSTNAME:/tmp/weeks.task.tmp
        ssh -o StrictHostKeyChecking=no -i private_key.pem $USER_NAME@$HOSTNAME << EOF
          # Crear directorio de respaldo si no existe
          if [ ! -d "/home/$USER_NAME/backup/sunissUp/plugins/tasks" ]; then
            mkdir -p /home/$USER_NAME/backup/sunissUp/plugins/tasks
          fi
          
          # Crear copia de respaldo del plugin weeks.task
          cp /opt/sunissUp/plugins/tasks/weeks.task /home/$USER_NAME/backup/sunissUp/plugins/tasks/weeks.task_$(date +%Y%m%d_%H%M%S)
          
          if [[ -z "$CALLED_BY_DEPLOY_CENTER" ]]; then
            sudo systemctl stop sunissup
          fi
          
          # Verificar si el directorio existe, si no, crearlo
          if [ ! -d "/opt/sunissUp/plugins" ]; then
            sudo mkdir -p /opt/sunissUp/plugins
          fi
          
          # Verificar si existe el directorio tasks, si no, crearlo
          if [ ! -d "/opt/sunissUp/plugins/tasks" ]; then
            sudo mkdir -p /opt/sunissUp/plugins/tasks
          fi
          
          # Mover el plugin
          sudo mv /tmp/weeks.task.tmp /opt/sunissUp/plugins/tasks/weeks.task
          
          sudo chmod +x /opt/sunissUp/plugins/tasks/weeks.task
          if [[ -z "$CALLED_BY_DEPLOY_CENTER" ]]; then
            sudo systemctl start sunissup
          fi
          echo "Weeks Task desplegado correctamente."
        EOF