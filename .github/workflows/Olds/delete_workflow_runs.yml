name: Delete Old Workflow Runs

on:
  schedule:
    - cron: '0 0 * * *'  # Se ejecuta todos los días a medianoche UTC
  workflow_dispatch:     # Permite ejecución manual

jobs:
  Delete_Old_Workflow-Runs:
    runs-on: ubuntu-latest
    steps:
      - name: Delete Old Workflow Runs
        env:
          DELETE_GIT_TOKEN: ${{ secrets.DELETE_GIT_TOKEN }}
          DELETE_KEEP_LATEST: ${{ vars.DELETE_KEEP_LATEST }}
        run: |
          # Variables base
          REPO=${{ github.repository }}
          API_URL="https://api.github.com/repos/$REPO"
          
          echo "Verificando acceso a la API..."
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token $DELETE_GIT_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "$API_URL")
          
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "Error: No se pudo acceder a la API. Status: $HTTP_STATUS"
            exit 1
          fi

          ###############################
          # Funciones auxiliares en bash
          ###############################

          # Función para obtener todos los runs (de cualquier workflow) en formato JSON (array plano)
          get_all_runs() {
            local page=1
            local all_runs_json="[]"
            while :; do
              response=$(curl -s -H "Authorization: token $DELETE_GIT_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                "$API_URL/actions/runs?per_page=100&page=$page")
              count=$(echo "$response" | jq -r '.workflow_runs | length')
              if [ "$count" -eq 0 ]; then
                break
              fi
              # Combina el array actual con los obtenidos anteriormente
              runs_page=$(echo "$response" | jq '.workflow_runs')
              all_runs_json=$(echo "$all_runs_json $runs_page" | jq -s 'add')
              page=$((page+1))
            done
            echo "$all_runs_json"
          }

          # Función para obtener todos los runs de un workflow específico, ordenados por fecha (ascendente)
          get_sorted_runs_by_workflow() {
            local workflow_id=$1
            local page=1
            local all_runs_json="[]"
            while :; do
              response=$(curl -s -H "Authorization: token $DELETE_GIT_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                "$API_URL/actions/workflows/$workflow_id/runs?per_page=100&page=$page")
              count=$(echo "$response" | jq -r '.workflow_runs | length')
              if [ "$count" -eq 0 ]; then
                break
              fi
              runs_page=$(echo "$response" | jq '.workflow_runs')
              all_runs_json=$(echo "$all_runs_json $runs_page" | jq -s 'add')
              page=$((page+1))
            done
            # Ordenar por fecha de creación (ascendente: los más antiguos primero)
            echo "$all_runs_json" | jq -r 'sort_by(.created_at) | .[].id'
          }

          ##############################################
          # 1. Eliminar ejecuciones huérfanas (sin workflow activo)
          ##############################################
          echo "Obteniendo workflows activos..."
          workflows_response=$(curl -s -H "Authorization: token $DELETE_GIT_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "$API_URL/actions/workflows")
          
          active_workflow_ids=$(echo "$workflows_response" | jq -r '.workflows[].id')
          echo "IDs de workflows activos: $active_workflow_ids"

          echo "Obteniendo todas las ejecuciones del repositorio..."
          all_runs=$(get_all_runs)
          orphans_deleted=0

          # Para cada run, si su workflow_id no está entre los activos se borra
          echo "$all_runs" | jq -c '.[]' | while read -r run; do
            run_id=$(echo "$run" | jq -r '.id')
            run_workflow_id=$(echo "$run" | jq -r '.workflow_id')
            if ! echo "$active_workflow_ids" | grep -q "^$run_workflow_id\$"; then
              echo "Eliminando ejecución huérfana: ID=$run_id, Workflow ID=$run_workflow_id"
              del_status=$(curl -X DELETE -s -o /dev/null -w "%{http_code}" \
                -H "Authorization: token $DELETE_GIT_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                "$API_URL/actions/runs/$run_id")
              if [ "$del_status" = "204" ]; then
                echo "Ejecución $run_id eliminada correctamente."
                orphans_deleted=$((orphans_deleted+1))
              else
                echo "Error al eliminar la ejecución $run_id. Status: $del_status"
              fi
            fi
          done

          echo "Total de ejecuciones huérfanas eliminadas: $orphans_deleted"

          #####################################################
          # 2. Para cada workflow activo, conservar solo los últimos 5
          #####################################################
          echo "$workflows_response" | jq -c '.workflows[]' | while read -r wf; do
            wf_id=$(echo "$wf" | jq -r '.id')
            wf_name=$(echo "$wf" | jq -r '.name')
            echo "Procesando workflow: $wf_name (ID: $wf_id)"
            
            sorted_run_ids=$(get_sorted_runs_by_workflow "$wf_id")
            # Convertir los IDs a un array de bash
            mapfile -t run_ids_array <<< "$sorted_run_ids"
            total_runs=${#run_ids_array[@]}
            echo "Total de ejecuciones encontradas para $wf_name: $total_runs"
            
            if [ $total_runs -le $DELETE_KEEP_LATEST ]; then
              echo "No hay suficientes ejecuciones para borrar en $wf_name. Se mantienen todas."
              continue
            fi
            
            runs_to_delete=$((total_runs - DELETE_KEEP_LATEST))
            echo "Se borrarán $runs_to_delete ejecuciones antiguas de $wf_name"
            
            # Borrar los runs más antiguos (al inicio del array)
            for ((i = 0; i < runs_to_delete; i++)); do
              run_id=${run_ids_array[i]}
              echo "Borrando ejecución $run_id de $wf_name"
              del_status=$(curl -X DELETE -s -o /dev/null -w "%{http_code}" \
                -H "Authorization: token $DELETE_GIT_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                "$API_URL/actions/runs/$run_id")
              if [ "$del_status" = "204" ]; then
                echo "Ejecución $run_id borrada exitosamente."
              else
                echo "Error al borrar la ejecución $run_id. Status: $del_status"
              fi
            done
          done
