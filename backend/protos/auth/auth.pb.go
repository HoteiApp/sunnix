// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: auth.proto

package auth

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Mensaje para identificar el usuario (puede ser un ID o lo que necesites)
type UserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UserRequest) Reset() {
	*x = UserRequest{}
	mi := &file_auth_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRequest) ProtoMessage() {}

func (x *UserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRequest.ProtoReflect.Descriptor instead.
func (*UserRequest) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{0}
}

func (x *UserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Definimos el mensaje ActiveUser con sus campos
type ActiveUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User         *User              `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`                               // Referencia al mensaje 'User'
	Record       *WorkerRecord      `protobuf:"bytes,2,opt,name=record,proto3" json:"record,omitempty"`                           // Referencia al mensaje 'WorkerRecord'
	Signature    string             `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`                     // Firma del usuario
	WeekActive   *Week              `protobuf:"bytes,4,opt,name=week_active,json=weekActive,proto3" json:"week_active,omitempty"` // Semana activa del usuario
	Events       []*Event           `protobuf:"bytes,5,rep,name=events,proto3" json:"events,omitempty"`                           // Eventos relacionados
	Conversation []*OutConversation `protobuf:"bytes,6,rep,name=conversation,proto3" json:"conversation,omitempty"`               // Conversaciones relacionadas
}

func (x *ActiveUser) Reset() {
	*x = ActiveUser{}
	mi := &file_auth_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActiveUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveUser) ProtoMessage() {}

func (x *ActiveUser) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveUser.ProtoReflect.Descriptor instead.
func (*ActiveUser) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{1}
}

func (x *ActiveUser) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ActiveUser) GetRecord() *WorkerRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *ActiveUser) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *ActiveUser) GetWeekActive() *Week {
	if x != nil {
		return x.WeekActive
	}
	return nil
}

func (x *ActiveUser) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ActiveUser) GetConversation() []*OutConversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

// Definici칩n de Users (Usuario)
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                               // ID del usuario
	Uid                 string  `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`                                                              // Username
	Email               string  `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`                                                          // Email address
	Nick                string  `protobuf:"bytes,4,opt,name=nick,proto3" json:"nick,omitempty"`                                                            // NickName
	ChangePassword      bool    `protobuf:"varint,5,opt,name=change_password,json=changePassword,proto3" json:"change_password,omitempty"`                 // Si el usuario debe cambiar la contrase침a
	Status              string  `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`                                                        // Estado (active | inactive | hiring)
	SecurityCode        bool    `protobuf:"varint,7,opt,name=security_code,json=securityCode,proto3" json:"security_code,omitempty"`                       // Security Code 2fa
	Global              bool    `protobuf:"varint,8,opt,name=global,proto3" json:"global,omitempty"`                                                       // Indica si el usuario es global
	Approved            bool    `protobuf:"varint,9,opt,name=approved,proto3" json:"approved,omitempty"`                                                   // Indica si el usuario ha sido aprobado
	Active              bool    `protobuf:"varint,10,opt,name=active,proto3" json:"active,omitempty"`                                                      // Indica si el usuario est치 activo
	ReferrerId          uint32  `protobuf:"varint,11,opt,name=referrer_id,json=referrerId,proto3" json:"referrer_id,omitempty"`                            // ID del usuario que refiri칩 a este usuario (opcional)
	Roll                string  `protobuf:"bytes,12,opt,name=roll,proto3" json:"roll,omitempty"`                                                           // Roles del sistema (tmp|TCM|SUPERVISOR|QA|HR|MG)
	Credentials         string  `protobuf:"bytes,13,opt,name=credentials,proto3" json:"credentials,omitempty"`                                             // Credenciales si el usuario es TCM o Supervisor
	TemporarySupervisor bool    `protobuf:"varint,14,opt,name=temporary_supervisor,json=temporarySupervisor,proto3" json:"temporary_supervisor,omitempty"` // Indica si el supervisor es temporal
	Signature           string  `protobuf:"bytes,15,opt,name=signature,proto3" json:"signature,omitempty"`                                                 // Firma del usuario (usualmente no se incluye en el protocolo)
	HrCanSign           bool    `protobuf:"varint,16,opt,name=hr_can_sign,json=hrCanSign,proto3" json:"hr_can_sign,omitempty"`                             // Autoriza a HR a firmar por el usuario
	QaCanSign           bool    `protobuf:"varint,17,opt,name=qa_can_sign,json=qaCanSign,proto3" json:"qa_can_sign,omitempty"`                             // Autoriza a QA a firmar por el usuario
	SupervisorCanSign   bool    `protobuf:"varint,18,opt,name=supervisor_can_sign,json=supervisorCanSign,proto3" json:"supervisor_can_sign,omitempty"`     // Autoriza al Supervisor a firmar por el usuario
	Record              uint32  `protobuf:"varint,19,opt,name=record,proto3" json:"record,omitempty"`                                                      // Registro asociado al usuario
	Supervisor          string  `protobuf:"bytes,20,opt,name=supervisor,proto3" json:"supervisor,omitempty"`                                               // ID del supervisor si es TCM
	PaymentByUnits      float32 `protobuf:"fixed32,21,opt,name=payment_by_units,json=paymentByUnits,proto3" json:"payment_by_units,omitempty"`             // Pago por unidades, valor por defecto 7.28
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_auth_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *User) GetChangePassword() bool {
	if x != nil {
		return x.ChangePassword
	}
	return false
}

func (x *User) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *User) GetSecurityCode() bool {
	if x != nil {
		return x.SecurityCode
	}
	return false
}

func (x *User) GetGlobal() bool {
	if x != nil {
		return x.Global
	}
	return false
}

func (x *User) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

func (x *User) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *User) GetReferrerId() uint32 {
	if x != nil {
		return x.ReferrerId
	}
	return 0
}

func (x *User) GetRoll() string {
	if x != nil {
		return x.Roll
	}
	return ""
}

func (x *User) GetCredentials() string {
	if x != nil {
		return x.Credentials
	}
	return ""
}

func (x *User) GetTemporarySupervisor() bool {
	if x != nil {
		return x.TemporarySupervisor
	}
	return false
}

func (x *User) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *User) GetHrCanSign() bool {
	if x != nil {
		return x.HrCanSign
	}
	return false
}

func (x *User) GetQaCanSign() bool {
	if x != nil {
		return x.QaCanSign
	}
	return false
}

func (x *User) GetSupervisorCanSign() bool {
	if x != nil {
		return x.SupervisorCanSign
	}
	return false
}

func (x *User) GetRecord() uint32 {
	if x != nil {
		return x.Record
	}
	return 0
}

func (x *User) GetSupervisor() string {
	if x != nil {
		return x.Supervisor
	}
	return ""
}

func (x *User) GetPaymentByUnits() float32 {
	if x != nil {
		return x.PaymentByUnits
	}
	return 0
}

// Definici칩n de OutConversation (Conversaciones salientes)
type OutConversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          float64 `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`                                    // Utilizamos 'double' para mapear 'float64' en Go
	User        float64 `protobuf:"fixed64,2,opt,name=user,proto3" json:"user,omitempty"`                                // 'user' es 'float64' en Go, por lo que usamos 'double' en Protobuf
	Online      bool    `protobuf:"varint,3,opt,name=online,proto3" json:"online,omitempty"`                             // 'online' es un valor booleano
	Nick        string  `protobuf:"bytes,4,opt,name=nick,proto3" json:"nick,omitempty"`                                  // 'nick' es de tipo 'string'
	LastMessage string  `protobuf:"bytes,5,opt,name=last_message,json=lastMessage,proto3" json:"last_message,omitempty"` // 'last_message' es de tipo 'string'
}

func (x *OutConversation) Reset() {
	*x = OutConversation{}
	mi := &file_auth_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutConversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutConversation) ProtoMessage() {}

func (x *OutConversation) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutConversation.ProtoReflect.Descriptor instead.
func (*OutConversation) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{3}
}

func (x *OutConversation) GetId() float64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OutConversation) GetUser() float64 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *OutConversation) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *OutConversation) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *OutConversation) GetLastMessage() string {
	if x != nil {
		return x.LastMessage
	}
	return ""
}

// Definici칩n de WorkerRecord (Historial laboral)
type WorkerRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    uint32              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid                   string              `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	FullName              string              `protobuf:"bytes,3,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	Email                 string              `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Address               string              `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	City                  string              `protobuf:"bytes,6,opt,name=city,proto3" json:"city,omitempty"`
	State                 string              `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	ZipCode               string              `protobuf:"bytes,8,opt,name=zip_code,json=zipCode,proto3" json:"zip_code,omitempty"`
	County                string              `protobuf:"bytes,9,opt,name=county,proto3" json:"county,omitempty"`
	HomePhone             string              `protobuf:"bytes,10,opt,name=home_phone,json=homePhone,proto3" json:"home_phone,omitempty"`
	CellPhone             string              `protobuf:"bytes,11,opt,name=cell_phone,json=cellPhone,proto3" json:"cell_phone,omitempty"`
	SocialSecurity        string              `protobuf:"bytes,12,opt,name=social_security,json=socialSecurity,proto3" json:"social_security,omitempty"`
	Dob                   string              `protobuf:"bytes,13,opt,name=dob,proto3" json:"dob,omitempty"`
	ApplicationDate       string              `protobuf:"bytes,14,opt,name=application_date,json=applicationDate,proto3" json:"application_date,omitempty"`
	ApplyingAs            string              `protobuf:"bytes,15,opt,name=applying_as,json=applyingAs,proto3" json:"applying_as,omitempty"`
	PositionApplied       string              `protobuf:"bytes,16,opt,name=position_applied,json=positionApplied,proto3" json:"position_applied,omitempty"`
	AvailableStartDate    string              `protobuf:"bytes,17,opt,name=available_start_date,json=availableStartDate,proto3" json:"available_start_date,omitempty"`
	AvailableFor          string              `protobuf:"bytes,18,opt,name=available_for,json=availableFor,proto3" json:"available_for,omitempty"`
	Question1             string              `protobuf:"bytes,19,opt,name=question1,proto3" json:"question1,omitempty"`
	Question2             string              `protobuf:"bytes,20,opt,name=question2,proto3" json:"question2,omitempty"`
	Question3             string              `protobuf:"bytes,21,opt,name=question3,proto3" json:"question3,omitempty"`
	Question4             string              `protobuf:"bytes,22,opt,name=question4,proto3" json:"question4,omitempty"`
	Question5             string              `protobuf:"bytes,23,opt,name=question5,proto3" json:"question5,omitempty"`
	Question6             string              `protobuf:"bytes,24,opt,name=question6,proto3" json:"question6,omitempty"`
	Question7             string              `protobuf:"bytes,25,opt,name=question7,proto3" json:"question7,omitempty"`
	Question8             string              `protobuf:"bytes,26,opt,name=question8,proto3" json:"question8,omitempty"`
	Question9             string              `protobuf:"bytes,27,opt,name=question9,proto3" json:"question9,omitempty"`
	DetailsQuestionsInYes string              `protobuf:"bytes,28,opt,name=details_questions_in_yes,json=detailsQuestionsInYes,proto3" json:"details_questions_in_yes,omitempty"`
	Question10            string              `protobuf:"bytes,29,opt,name=question10,proto3" json:"question10,omitempty"`
	ChargedExplain        string              `protobuf:"bytes,30,opt,name=charged_explain,json=chargedExplain,proto3" json:"charged_explain,omitempty"`
	Question11            string              `protobuf:"bytes,31,opt,name=question11,proto3" json:"question11,omitempty"`
	Question12            string              `protobuf:"bytes,32,opt,name=question12,proto3" json:"question12,omitempty"`
	LanguageList          string              `protobuf:"bytes,33,opt,name=language_list,json=languageList,proto3" json:"language_list,omitempty"`
	SkillsList            string              `protobuf:"bytes,34,opt,name=skills_list,json=skillsList,proto3" json:"skills_list,omitempty"`
	Education             *Educations         `protobuf:"bytes,35,opt,name=education,proto3" json:"education,omitempty"`
	EmploymentHistory     *EmploymentHistory  `protobuf:"bytes,36,opt,name=employment_history,json=employmentHistory,proto3" json:"employment_history,omitempty"`
	PersonalReferences    *PersonalReferences `protobuf:"bytes,37,opt,name=personal_references,json=personalReferences,proto3" json:"personal_references,omitempty"`
	EmergencyMedical      *EmergencyMedical   `protobuf:"bytes,38,opt,name=emergency_medical,json=emergencyMedical,proto3" json:"emergency_medical,omitempty"`
	NecessaryDocuments    *NecessaryDocuments `protobuf:"bytes,39,opt,name=necessary_documents,json=necessaryDocuments,proto3" json:"necessary_documents,omitempty"`
	DirectDeposit         *DirectDeposit      `protobuf:"bytes,40,opt,name=direct_deposit,json=directDeposit,proto3" json:"direct_deposit,omitempty"`
}

func (x *WorkerRecord) Reset() {
	*x = WorkerRecord{}
	mi := &file_auth_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerRecord) ProtoMessage() {}

func (x *WorkerRecord) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerRecord.ProtoReflect.Descriptor instead.
func (*WorkerRecord) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{4}
}

func (x *WorkerRecord) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WorkerRecord) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *WorkerRecord) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *WorkerRecord) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *WorkerRecord) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *WorkerRecord) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *WorkerRecord) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *WorkerRecord) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *WorkerRecord) GetCounty() string {
	if x != nil {
		return x.County
	}
	return ""
}

func (x *WorkerRecord) GetHomePhone() string {
	if x != nil {
		return x.HomePhone
	}
	return ""
}

func (x *WorkerRecord) GetCellPhone() string {
	if x != nil {
		return x.CellPhone
	}
	return ""
}

func (x *WorkerRecord) GetSocialSecurity() string {
	if x != nil {
		return x.SocialSecurity
	}
	return ""
}

func (x *WorkerRecord) GetDob() string {
	if x != nil {
		return x.Dob
	}
	return ""
}

func (x *WorkerRecord) GetApplicationDate() string {
	if x != nil {
		return x.ApplicationDate
	}
	return ""
}

func (x *WorkerRecord) GetApplyingAs() string {
	if x != nil {
		return x.ApplyingAs
	}
	return ""
}

func (x *WorkerRecord) GetPositionApplied() string {
	if x != nil {
		return x.PositionApplied
	}
	return ""
}

func (x *WorkerRecord) GetAvailableStartDate() string {
	if x != nil {
		return x.AvailableStartDate
	}
	return ""
}

func (x *WorkerRecord) GetAvailableFor() string {
	if x != nil {
		return x.AvailableFor
	}
	return ""
}

func (x *WorkerRecord) GetQuestion1() string {
	if x != nil {
		return x.Question1
	}
	return ""
}

func (x *WorkerRecord) GetQuestion2() string {
	if x != nil {
		return x.Question2
	}
	return ""
}

func (x *WorkerRecord) GetQuestion3() string {
	if x != nil {
		return x.Question3
	}
	return ""
}

func (x *WorkerRecord) GetQuestion4() string {
	if x != nil {
		return x.Question4
	}
	return ""
}

func (x *WorkerRecord) GetQuestion5() string {
	if x != nil {
		return x.Question5
	}
	return ""
}

func (x *WorkerRecord) GetQuestion6() string {
	if x != nil {
		return x.Question6
	}
	return ""
}

func (x *WorkerRecord) GetQuestion7() string {
	if x != nil {
		return x.Question7
	}
	return ""
}

func (x *WorkerRecord) GetQuestion8() string {
	if x != nil {
		return x.Question8
	}
	return ""
}

func (x *WorkerRecord) GetQuestion9() string {
	if x != nil {
		return x.Question9
	}
	return ""
}

func (x *WorkerRecord) GetDetailsQuestionsInYes() string {
	if x != nil {
		return x.DetailsQuestionsInYes
	}
	return ""
}

func (x *WorkerRecord) GetQuestion10() string {
	if x != nil {
		return x.Question10
	}
	return ""
}

func (x *WorkerRecord) GetChargedExplain() string {
	if x != nil {
		return x.ChargedExplain
	}
	return ""
}

func (x *WorkerRecord) GetQuestion11() string {
	if x != nil {
		return x.Question11
	}
	return ""
}

func (x *WorkerRecord) GetQuestion12() string {
	if x != nil {
		return x.Question12
	}
	return ""
}

func (x *WorkerRecord) GetLanguageList() string {
	if x != nil {
		return x.LanguageList
	}
	return ""
}

func (x *WorkerRecord) GetSkillsList() string {
	if x != nil {
		return x.SkillsList
	}
	return ""
}

func (x *WorkerRecord) GetEducation() *Educations {
	if x != nil {
		return x.Education
	}
	return nil
}

func (x *WorkerRecord) GetEmploymentHistory() *EmploymentHistory {
	if x != nil {
		return x.EmploymentHistory
	}
	return nil
}

func (x *WorkerRecord) GetPersonalReferences() *PersonalReferences {
	if x != nil {
		return x.PersonalReferences
	}
	return nil
}

func (x *WorkerRecord) GetEmergencyMedical() *EmergencyMedical {
	if x != nil {
		return x.EmergencyMedical
	}
	return nil
}

func (x *WorkerRecord) GetNecessaryDocuments() *NecessaryDocuments {
	if x != nil {
		return x.NecessaryDocuments
	}
	return nil
}

func (x *WorkerRecord) GetDirectDeposit() *DirectDeposit {
	if x != nil {
		return x.DirectDeposit
	}
	return nil
}

// Definici칩n de Educations
type Educations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Institution       string `protobuf:"bytes,1,opt,name=institution,proto3" json:"institution,omitempty"`
	Course            string `protobuf:"bytes,2,opt,name=course,proto3" json:"course,omitempty"`
	Started           string `protobuf:"bytes,3,opt,name=started,proto3" json:"started,omitempty"`
	Completed         string `protobuf:"bytes,4,opt,name=completed,proto3" json:"completed,omitempty"`
	SecondInstitution string `protobuf:"bytes,5,opt,name=second_institution,json=secondInstitution,proto3" json:"second_institution,omitempty"`
	SecondCourse      string `protobuf:"bytes,6,opt,name=second_course,json=secondCourse,proto3" json:"second_course,omitempty"`
	SecondStarted     string `protobuf:"bytes,7,opt,name=second_started,json=secondStarted,proto3" json:"second_started,omitempty"`
	SecondCompleted   string `protobuf:"bytes,8,opt,name=second_completed,json=secondCompleted,proto3" json:"second_completed,omitempty"`
	ThirdInstitution  string `protobuf:"bytes,9,opt,name=third_institution,json=thirdInstitution,proto3" json:"third_institution,omitempty"`
	ThirdCourse       string `protobuf:"bytes,10,opt,name=third_course,json=thirdCourse,proto3" json:"third_course,omitempty"`
	ThirdStarted      string `protobuf:"bytes,11,opt,name=third_started,json=thirdStarted,proto3" json:"third_started,omitempty"`
	ThirdCompleted    string `protobuf:"bytes,12,opt,name=third_completed,json=thirdCompleted,proto3" json:"third_completed,omitempty"`
}

func (x *Educations) Reset() {
	*x = Educations{}
	mi := &file_auth_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Educations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Educations) ProtoMessage() {}

func (x *Educations) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Educations.ProtoReflect.Descriptor instead.
func (*Educations) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{5}
}

func (x *Educations) GetInstitution() string {
	if x != nil {
		return x.Institution
	}
	return ""
}

func (x *Educations) GetCourse() string {
	if x != nil {
		return x.Course
	}
	return ""
}

func (x *Educations) GetStarted() string {
	if x != nil {
		return x.Started
	}
	return ""
}

func (x *Educations) GetCompleted() string {
	if x != nil {
		return x.Completed
	}
	return ""
}

func (x *Educations) GetSecondInstitution() string {
	if x != nil {
		return x.SecondInstitution
	}
	return ""
}

func (x *Educations) GetSecondCourse() string {
	if x != nil {
		return x.SecondCourse
	}
	return ""
}

func (x *Educations) GetSecondStarted() string {
	if x != nil {
		return x.SecondStarted
	}
	return ""
}

func (x *Educations) GetSecondCompleted() string {
	if x != nil {
		return x.SecondCompleted
	}
	return ""
}

func (x *Educations) GetThirdInstitution() string {
	if x != nil {
		return x.ThirdInstitution
	}
	return ""
}

func (x *Educations) GetThirdCourse() string {
	if x != nil {
		return x.ThirdCourse
	}
	return ""
}

func (x *Educations) GetThirdStarted() string {
	if x != nil {
		return x.ThirdStarted
	}
	return ""
}

func (x *Educations) GetThirdCompleted() string {
	if x != nil {
		return x.ThirdCompleted
	}
	return ""
}

// Definici칩n de EmploymentHistory
type EmploymentHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Employer         string `protobuf:"bytes,1,opt,name=employer,proto3" json:"employer,omitempty"`
	Address          string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Supervisor       string `protobuf:"bytes,3,opt,name=supervisor,proto3" json:"supervisor,omitempty"`
	Phone            string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	Period           string `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
	Position         string `protobuf:"bytes,6,opt,name=position,proto3" json:"position,omitempty"`
	Reason           string `protobuf:"bytes,7,opt,name=reason,proto3" json:"reason,omitempty"`
	SecondEmployer   string `protobuf:"bytes,8,opt,name=second_employer,json=secondEmployer,proto3" json:"second_employer,omitempty"`
	SecondAddress    string `protobuf:"bytes,9,opt,name=second_address,json=secondAddress,proto3" json:"second_address,omitempty"`
	SecondSupervisor string `protobuf:"bytes,10,opt,name=second_supervisor,json=secondSupervisor,proto3" json:"second_supervisor,omitempty"`
	SecondPhone      string `protobuf:"bytes,11,opt,name=second_phone,json=secondPhone,proto3" json:"second_phone,omitempty"`
	SecondPeriod     string `protobuf:"bytes,12,opt,name=second_period,json=secondPeriod,proto3" json:"second_period,omitempty"`
	SecondPosition   string `protobuf:"bytes,13,opt,name=second_position,json=secondPosition,proto3" json:"second_position,omitempty"`
	SecondReason     string `protobuf:"bytes,14,opt,name=second_reason,json=secondReason,proto3" json:"second_reason,omitempty"`
}

func (x *EmploymentHistory) Reset() {
	*x = EmploymentHistory{}
	mi := &file_auth_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmploymentHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmploymentHistory) ProtoMessage() {}

func (x *EmploymentHistory) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmploymentHistory.ProtoReflect.Descriptor instead.
func (*EmploymentHistory) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{6}
}

func (x *EmploymentHistory) GetEmployer() string {
	if x != nil {
		return x.Employer
	}
	return ""
}

func (x *EmploymentHistory) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *EmploymentHistory) GetSupervisor() string {
	if x != nil {
		return x.Supervisor
	}
	return ""
}

func (x *EmploymentHistory) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *EmploymentHistory) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *EmploymentHistory) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *EmploymentHistory) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *EmploymentHistory) GetSecondEmployer() string {
	if x != nil {
		return x.SecondEmployer
	}
	return ""
}

func (x *EmploymentHistory) GetSecondAddress() string {
	if x != nil {
		return x.SecondAddress
	}
	return ""
}

func (x *EmploymentHistory) GetSecondSupervisor() string {
	if x != nil {
		return x.SecondSupervisor
	}
	return ""
}

func (x *EmploymentHistory) GetSecondPhone() string {
	if x != nil {
		return x.SecondPhone
	}
	return ""
}

func (x *EmploymentHistory) GetSecondPeriod() string {
	if x != nil {
		return x.SecondPeriod
	}
	return ""
}

func (x *EmploymentHistory) GetSecondPosition() string {
	if x != nil {
		return x.SecondPosition
	}
	return ""
}

func (x *EmploymentHistory) GetSecondReason() string {
	if x != nil {
		return x.SecondReason
	}
	return ""
}

// Definici칩n de PersonalReferences
type PersonalReferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Phone              string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Relationship       string `protobuf:"bytes,3,opt,name=relationship,proto3" json:"relationship,omitempty"`
	SecondName         string `protobuf:"bytes,4,opt,name=second_name,json=secondName,proto3" json:"second_name,omitempty"`
	SecondPhone        string `protobuf:"bytes,5,opt,name=second_phone,json=secondPhone,proto3" json:"second_phone,omitempty"`
	SecondRelationship string `protobuf:"bytes,6,opt,name=second_relationship,json=secondRelationship,proto3" json:"second_relationship,omitempty"`
}

func (x *PersonalReferences) Reset() {
	*x = PersonalReferences{}
	mi := &file_auth_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PersonalReferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalReferences) ProtoMessage() {}

func (x *PersonalReferences) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalReferences.ProtoReflect.Descriptor instead.
func (*PersonalReferences) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{7}
}

func (x *PersonalReferences) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PersonalReferences) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *PersonalReferences) GetRelationship() string {
	if x != nil {
		return x.Relationship
	}
	return ""
}

func (x *PersonalReferences) GetSecondName() string {
	if x != nil {
		return x.SecondName
	}
	return ""
}

func (x *PersonalReferences) GetSecondPhone() string {
	if x != nil {
		return x.SecondPhone
	}
	return ""
}

func (x *PersonalReferences) GetSecondRelationship() string {
	if x != nil {
		return x.SecondRelationship
	}
	return ""
}

// Definici칩n de EmergencyMedical
type EmergencyMedical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Relationship      string `protobuf:"bytes,2,opt,name=relationship,proto3" json:"relationship,omitempty"`
	HomePhone         string `protobuf:"bytes,3,opt,name=home_phone,json=homePhone,proto3" json:"home_phone,omitempty"`
	CellPhone         string `protobuf:"bytes,4,opt,name=cell_phone,json=cellPhone,proto3" json:"cell_phone,omitempty"`
	Employer          string `protobuf:"bytes,5,opt,name=employer,proto3" json:"employer,omitempty"`
	EmployerPhone     string `protobuf:"bytes,6,opt,name=employer_phone,json=employerPhone,proto3" json:"employer_phone,omitempty"`
	KnownAllergies    string `protobuf:"bytes,7,opt,name=known_allergies,json=knownAllergies,proto3" json:"known_allergies,omitempty"`
	HealthCondition   string `protobuf:"bytes,8,opt,name=health_condition,json=healthCondition,proto3" json:"health_condition,omitempty"`
	Medications       string `protobuf:"bytes,9,opt,name=medications,proto3" json:"medications,omitempty"`
	PhysiciansName    string `protobuf:"bytes,10,opt,name=physicians_name,json=physiciansName,proto3" json:"physicians_name,omitempty"`
	PhysiciansPhone   string `protobuf:"bytes,11,opt,name=physicians_phone,json=physiciansPhone,proto3" json:"physicians_phone,omitempty"`
	PreferredHospital string `protobuf:"bytes,12,opt,name=preferred_hospital,json=preferredHospital,proto3" json:"preferred_hospital,omitempty"`
	MedicalInsurance  string `protobuf:"bytes,13,opt,name=medical_insurance,json=medicalInsurance,proto3" json:"medical_insurance,omitempty"`
	Policy            string `protobuf:"bytes,14,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *EmergencyMedical) Reset() {
	*x = EmergencyMedical{}
	mi := &file_auth_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmergencyMedical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmergencyMedical) ProtoMessage() {}

func (x *EmergencyMedical) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmergencyMedical.ProtoReflect.Descriptor instead.
func (*EmergencyMedical) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{8}
}

func (x *EmergencyMedical) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EmergencyMedical) GetRelationship() string {
	if x != nil {
		return x.Relationship
	}
	return ""
}

func (x *EmergencyMedical) GetHomePhone() string {
	if x != nil {
		return x.HomePhone
	}
	return ""
}

func (x *EmergencyMedical) GetCellPhone() string {
	if x != nil {
		return x.CellPhone
	}
	return ""
}

func (x *EmergencyMedical) GetEmployer() string {
	if x != nil {
		return x.Employer
	}
	return ""
}

func (x *EmergencyMedical) GetEmployerPhone() string {
	if x != nil {
		return x.EmployerPhone
	}
	return ""
}

func (x *EmergencyMedical) GetKnownAllergies() string {
	if x != nil {
		return x.KnownAllergies
	}
	return ""
}

func (x *EmergencyMedical) GetHealthCondition() string {
	if x != nil {
		return x.HealthCondition
	}
	return ""
}

func (x *EmergencyMedical) GetMedications() string {
	if x != nil {
		return x.Medications
	}
	return ""
}

func (x *EmergencyMedical) GetPhysiciansName() string {
	if x != nil {
		return x.PhysiciansName
	}
	return ""
}

func (x *EmergencyMedical) GetPhysiciansPhone() string {
	if x != nil {
		return x.PhysiciansPhone
	}
	return ""
}

func (x *EmergencyMedical) GetPreferredHospital() string {
	if x != nil {
		return x.PreferredHospital
	}
	return ""
}

func (x *EmergencyMedical) GetMedicalInsurance() string {
	if x != nil {
		return x.MedicalInsurance
	}
	return ""
}

func (x *EmergencyMedical) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

// Definici칩n de NecessaryDocuments
type NecessaryDocuments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resume                      bool   `protobuf:"varint,1,opt,name=resume,proto3" json:"resume,omitempty"`
	DiplomaTranscripts          bool   `protobuf:"varint,2,opt,name=diploma_transcripts,json=diplomaTranscripts,proto3" json:"diploma_transcripts,omitempty"`
	LicensesCertifications      bool   `protobuf:"varint,3,opt,name=licenses_certifications,json=licensesCertifications,proto3" json:"licenses_certifications,omitempty"`
	CourseFcb                   bool   `protobuf:"varint,4,opt,name=course_fcb,json=courseFcb,proto3" json:"course_fcb,omitempty"`
	ServiceTrainerProvider      bool   `protobuf:"varint,5,opt,name=service_trainer_provider,json=serviceTrainerProvider,proto3" json:"service_trainer_provider,omitempty"`
	ServiceTrainerProviderDate  string `protobuf:"bytes,6,opt,name=service_trainer_provider_date,json=serviceTrainerProviderDate,proto3" json:"service_trainer_provider_date,omitempty"`
	ServiceCprAed               bool   `protobuf:"varint,7,opt,name=service_cpr_aed,json=serviceCprAed,proto3" json:"service_cpr_aed,omitempty"`
	ServiceCprAedDate           string `protobuf:"bytes,8,opt,name=service_cpr_aed_date,json=serviceCprAedDate,proto3" json:"service_cpr_aed_date,omitempty"`
	ServiceOsha                 bool   `protobuf:"varint,9,opt,name=service_osha,json=serviceOsha,proto3" json:"service_osha,omitempty"`
	ServiceOshaDate             string `protobuf:"bytes,10,opt,name=service_osha_date,json=serviceOshaDate,proto3" json:"service_osha_date,omitempty"`
	ServiceInfectionControl     bool   `protobuf:"varint,11,opt,name=service_infection_control,json=serviceInfectionControl,proto3" json:"service_infection_control,omitempty"`
	ServiceInfectionControlDate string `protobuf:"bytes,12,opt,name=service_infection_control_date,json=serviceInfectionControlDate,proto3" json:"service_infection_control_date,omitempty"`
	ServiceHivAids              bool   `protobuf:"varint,13,opt,name=service_hiv_aids,json=serviceHivAids,proto3" json:"service_hiv_aids,omitempty"`
	ServiceDomesticViolence     bool   `protobuf:"varint,14,opt,name=service_domestic_violence,json=serviceDomesticViolence,proto3" json:"service_domestic_violence,omitempty"`
	ServiceHippa                bool   `protobuf:"varint,15,opt,name=service_hippa,json=serviceHippa,proto3" json:"service_hippa,omitempty"`
	ServiceSecurityAwareness    bool   `protobuf:"varint,16,opt,name=service_security_awareness,json=serviceSecurityAwareness,proto3" json:"service_security_awareness,omitempty"`
	ServiceAccessCivilRights    bool   `protobuf:"varint,17,opt,name=service_access_civil_rights,json=serviceAccessCivilRights,proto3" json:"service_access_civil_rights,omitempty"`
	ServiceDeafHard             bool   `protobuf:"varint,18,opt,name=service_deaf_hard,json=serviceDeafHard,proto3" json:"service_deaf_hard,omitempty"`
	ServiceFarsCfars            bool   `protobuf:"varint,19,opt,name=service_fars_cfars,json=serviceFarsCfars,proto3" json:"service_fars_cfars,omitempty"`
	OtherMedicaidCertification  bool   `protobuf:"varint,20,opt,name=other_medicaid_certification,json=otherMedicaidCertification,proto3" json:"other_medicaid_certification,omitempty"`
	OtherMedicaidProvider       bool   `protobuf:"varint,21,opt,name=other_medicaid_provider,json=otherMedicaidProvider,proto3" json:"other_medicaid_provider,omitempty"`
	OtherDriversLicense         bool   `protobuf:"varint,22,opt,name=other_drivers_license,json=otherDriversLicense,proto3" json:"other_drivers_license,omitempty"`
	OtherSocialSecurityCard     bool   `protobuf:"varint,23,opt,name=other_social_security_card,json=otherSocialSecurityCard,proto3" json:"other_social_security_card,omitempty"`
	OtherProofLegalStatus       bool   `protobuf:"varint,24,opt,name=other_proof_legal_status,json=otherProofLegalStatus,proto3" json:"other_proof_legal_status,omitempty"`
	OtherEmployeeIdBadge        bool   `protobuf:"varint,25,opt,name=other_employee_id_badge,json=otherEmployeeIdBadge,proto3" json:"other_employee_id_badge,omitempty"`
	OtherVehicleRegistration    bool   `protobuf:"varint,26,opt,name=other_vehicle_registration,json=otherVehicleRegistration,proto3" json:"other_vehicle_registration,omitempty"`
	OtherProofInsurance         bool   `protobuf:"varint,27,opt,name=other_proof_insurance,json=otherProofInsurance,proto3" json:"other_proof_insurance,omitempty"`
	FormI9                      bool   `protobuf:"varint,28,opt,name=form_i9,json=formI9,proto3" json:"form_i9,omitempty"`
	FormW9                      bool   `protobuf:"varint,29,opt,name=form_w9,json=formW9,proto3" json:"form_w9,omitempty"`
	FormW4                      bool   `protobuf:"varint,30,opt,name=form_w4,json=formW4,proto3" json:"form_w4,omitempty"`
}

func (x *NecessaryDocuments) Reset() {
	*x = NecessaryDocuments{}
	mi := &file_auth_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NecessaryDocuments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NecessaryDocuments) ProtoMessage() {}

func (x *NecessaryDocuments) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NecessaryDocuments.ProtoReflect.Descriptor instead.
func (*NecessaryDocuments) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{9}
}

func (x *NecessaryDocuments) GetResume() bool {
	if x != nil {
		return x.Resume
	}
	return false
}

func (x *NecessaryDocuments) GetDiplomaTranscripts() bool {
	if x != nil {
		return x.DiplomaTranscripts
	}
	return false
}

func (x *NecessaryDocuments) GetLicensesCertifications() bool {
	if x != nil {
		return x.LicensesCertifications
	}
	return false
}

func (x *NecessaryDocuments) GetCourseFcb() bool {
	if x != nil {
		return x.CourseFcb
	}
	return false
}

func (x *NecessaryDocuments) GetServiceTrainerProvider() bool {
	if x != nil {
		return x.ServiceTrainerProvider
	}
	return false
}

func (x *NecessaryDocuments) GetServiceTrainerProviderDate() string {
	if x != nil {
		return x.ServiceTrainerProviderDate
	}
	return ""
}

func (x *NecessaryDocuments) GetServiceCprAed() bool {
	if x != nil {
		return x.ServiceCprAed
	}
	return false
}

func (x *NecessaryDocuments) GetServiceCprAedDate() string {
	if x != nil {
		return x.ServiceCprAedDate
	}
	return ""
}

func (x *NecessaryDocuments) GetServiceOsha() bool {
	if x != nil {
		return x.ServiceOsha
	}
	return false
}

func (x *NecessaryDocuments) GetServiceOshaDate() string {
	if x != nil {
		return x.ServiceOshaDate
	}
	return ""
}

func (x *NecessaryDocuments) GetServiceInfectionControl() bool {
	if x != nil {
		return x.ServiceInfectionControl
	}
	return false
}

func (x *NecessaryDocuments) GetServiceInfectionControlDate() string {
	if x != nil {
		return x.ServiceInfectionControlDate
	}
	return ""
}

func (x *NecessaryDocuments) GetServiceHivAids() bool {
	if x != nil {
		return x.ServiceHivAids
	}
	return false
}

func (x *NecessaryDocuments) GetServiceDomesticViolence() bool {
	if x != nil {
		return x.ServiceDomesticViolence
	}
	return false
}

func (x *NecessaryDocuments) GetServiceHippa() bool {
	if x != nil {
		return x.ServiceHippa
	}
	return false
}

func (x *NecessaryDocuments) GetServiceSecurityAwareness() bool {
	if x != nil {
		return x.ServiceSecurityAwareness
	}
	return false
}

func (x *NecessaryDocuments) GetServiceAccessCivilRights() bool {
	if x != nil {
		return x.ServiceAccessCivilRights
	}
	return false
}

func (x *NecessaryDocuments) GetServiceDeafHard() bool {
	if x != nil {
		return x.ServiceDeafHard
	}
	return false
}

func (x *NecessaryDocuments) GetServiceFarsCfars() bool {
	if x != nil {
		return x.ServiceFarsCfars
	}
	return false
}

func (x *NecessaryDocuments) GetOtherMedicaidCertification() bool {
	if x != nil {
		return x.OtherMedicaidCertification
	}
	return false
}

func (x *NecessaryDocuments) GetOtherMedicaidProvider() bool {
	if x != nil {
		return x.OtherMedicaidProvider
	}
	return false
}

func (x *NecessaryDocuments) GetOtherDriversLicense() bool {
	if x != nil {
		return x.OtherDriversLicense
	}
	return false
}

func (x *NecessaryDocuments) GetOtherSocialSecurityCard() bool {
	if x != nil {
		return x.OtherSocialSecurityCard
	}
	return false
}

func (x *NecessaryDocuments) GetOtherProofLegalStatus() bool {
	if x != nil {
		return x.OtherProofLegalStatus
	}
	return false
}

func (x *NecessaryDocuments) GetOtherEmployeeIdBadge() bool {
	if x != nil {
		return x.OtherEmployeeIdBadge
	}
	return false
}

func (x *NecessaryDocuments) GetOtherVehicleRegistration() bool {
	if x != nil {
		return x.OtherVehicleRegistration
	}
	return false
}

func (x *NecessaryDocuments) GetOtherProofInsurance() bool {
	if x != nil {
		return x.OtherProofInsurance
	}
	return false
}

func (x *NecessaryDocuments) GetFormI9() bool {
	if x != nil {
		return x.FormI9
	}
	return false
}

func (x *NecessaryDocuments) GetFormW9() bool {
	if x != nil {
		return x.FormW9
	}
	return false
}

func (x *NecessaryDocuments) GetFormW4() bool {
	if x != nil {
		return x.FormW4
	}
	return false
}

// Definici칩n de DirectDeposit
type DirectDeposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinancialInstitution string `protobuf:"bytes,1,opt,name=financial_institution,json=financialInstitution,proto3" json:"financial_institution,omitempty"`
	RoutingNumber        string `protobuf:"bytes,2,opt,name=routing_number,json=routingNumber,proto3" json:"routing_number,omitempty"`
	AccountNumber        string `protobuf:"bytes,3,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	Options              string `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *DirectDeposit) Reset() {
	*x = DirectDeposit{}
	mi := &file_auth_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DirectDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectDeposit) ProtoMessage() {}

func (x *DirectDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectDeposit.ProtoReflect.Descriptor instead.
func (*DirectDeposit) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{10}
}

func (x *DirectDeposit) GetFinancialInstitution() string {
	if x != nil {
		return x.FinancialInstitution
	}
	return ""
}

func (x *DirectDeposit) GetRoutingNumber() string {
	if x != nil {
		return x.RoutingNumber
	}
	return ""
}

func (x *DirectDeposit) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *DirectDeposit) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

// Definici칩n de Week
type Week struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Start  string `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End    string `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	Active bool   `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *Week) Reset() {
	*x = Week{}
	mi := &file_auth_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Week) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Week) ProtoMessage() {}

func (x *Week) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Week.ProtoReflect.Descriptor instead.
func (*Week) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{11}
}

func (x *Week) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Week) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *Week) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *Week) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

// Definici칩n de Event
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	User        uint32 `protobuf:"varint,2,opt,name=user,proto3" json:"user,omitempty"`
	Date        string `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	Title       string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_auth_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{12}
}

func (x *Event) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Event) GetUser() uint32 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *Event) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Event) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Event) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_auth_proto protoreflect.FileDescriptor

var file_auth_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x22, 0x26, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x83, 0x02, 0x0a, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x0b, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x57, 0x65, 0x65, 0x6b, 0x52, 0x0a, 0x77, 0x65, 0x65, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x23, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xfe, 0x04, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x31,
	0x0a, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x1e, 0x0a, 0x0b, 0x68, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x72, 0x43, 0x61, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x12,
	0x1e, 0x0a, 0x0b, 0x71, 0x61, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x71, 0x61, 0x43, 0x61, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x63, 0x61,
	0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x43, 0x61, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x22, 0x84, 0x01, 0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc6, 0x0b, 0x0a, 0x0c, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x6f, 0x62, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f, 0x62, 0x12, 0x29,
	0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x33, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x33, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x34, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x35, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x35, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x36,
	0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x37, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x37, 0x12, 0x1c,
	0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x12, 0x1c, 0x0a, 0x09,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x39, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x39, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x79, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e,
	0x59, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x31,
	0x30, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x31, 0x30, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x65,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x31, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x31, 0x12, 0x1e, 0x0a, 0x0a,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x32, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x32, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x45, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x12, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x11, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x49, 0x0a, 0x13, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x12, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x11, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x10, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x49, 0x0a, 0x13, 0x6e, 0x65,
	0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x4e,
	0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x12, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x52, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x22, 0xc2, 0x03, 0x0a, 0x0a, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x68, 0x69, 0x72,
	0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x68, 0x69, 0x72, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x69, 0x72,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x68, 0x69, 0x72, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xde, 0x03, 0x0a, 0x11, 0x45, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xd7, 0x01, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x2f, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x22, 0x89, 0x04, 0x0a, 0x10, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x69,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x6c, 0x6c, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x69,
	0x61, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x73, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x69, 0x61, 0x6e, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xd5, 0x0b,
	0x0a, 0x12, 0x4e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13,
	0x64, 0x69, 0x70, 0x6c, 0x6f, 0x6d, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x69, 0x70, 0x6c, 0x6f,
	0x6d, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x37, 0x0a,
	0x17, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x5f, 0x66, 0x63, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x46, 0x63, 0x62, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x41, 0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x70,
	0x72, 0x5f, 0x61, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x70, 0x72, 0x41, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x70, 0x72, 0x5f, 0x61, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x70, 0x72, 0x41, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x73, 0x68, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x73, 0x68, 0x61, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x73, 0x68, 0x61, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x73, 0x68, 0x61, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x69, 0x76, 0x5f, 0x61, 0x69, 0x64, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x69,
	0x76, 0x41, 0x69, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x56, 0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x69, 0x70,
	0x70, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x69, 0x70, 0x70, 0x61, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x77, 0x61, 0x72, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x69, 0x76, 0x69, 0x6c, 0x5f, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x69, 0x76, 0x69, 0x6c, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64,
	0x65, 0x61, 0x66, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x61, 0x66, 0x48, 0x61, 0x72, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x61, 0x72, 0x73, 0x5f,
	0x63, 0x66, 0x61, 0x72, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x61, 0x72, 0x73, 0x43, 0x66, 0x61, 0x72, 0x73, 0x12, 0x40, 0x0a,
	0x1c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x69, 0x64, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x69, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x17, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x69,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x69, 0x64, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x49, 0x64, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x69, 0x39, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x49, 0x39, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x77, 0x39, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x57, 0x39, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x77, 0x34, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x57, 0x34, 0x22, 0xac, 0x01, 0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x56, 0x0a, 0x04, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x77, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x40, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x11, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x1e, 0x5a, 0x1c, 0x70, 0x61, 0x74, 0x68, 0x2f,
	0x74, 0x6f, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_auth_proto_rawDescOnce sync.Once
	file_auth_proto_rawDescData = file_auth_proto_rawDesc
)

func file_auth_proto_rawDescGZIP() []byte {
	file_auth_proto_rawDescOnce.Do(func() {
		file_auth_proto_rawDescData = protoimpl.X.CompressGZIP(file_auth_proto_rawDescData)
	})
	return file_auth_proto_rawDescData
}

var file_auth_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_auth_proto_goTypes = []any{
	(*UserRequest)(nil),        // 0: auth.UserRequest
	(*ActiveUser)(nil),         // 1: auth.ActiveUser
	(*User)(nil),               // 2: auth.User
	(*OutConversation)(nil),    // 3: auth.OutConversation
	(*WorkerRecord)(nil),       // 4: auth.WorkerRecord
	(*Educations)(nil),         // 5: auth.Educations
	(*EmploymentHistory)(nil),  // 6: auth.EmploymentHistory
	(*PersonalReferences)(nil), // 7: auth.PersonalReferences
	(*EmergencyMedical)(nil),   // 8: auth.EmergencyMedical
	(*NecessaryDocuments)(nil), // 9: auth.NecessaryDocuments
	(*DirectDeposit)(nil),      // 10: auth.DirectDeposit
	(*Week)(nil),               // 11: auth.Week
	(*Event)(nil),              // 12: auth.Event
}
var file_auth_proto_depIdxs = []int32{
	2,  // 0: auth.ActiveUser.user:type_name -> auth.User
	4,  // 1: auth.ActiveUser.record:type_name -> auth.WorkerRecord
	11, // 2: auth.ActiveUser.week_active:type_name -> auth.Week
	12, // 3: auth.ActiveUser.events:type_name -> auth.Event
	3,  // 4: auth.ActiveUser.conversation:type_name -> auth.OutConversation
	5,  // 5: auth.WorkerRecord.education:type_name -> auth.Educations
	6,  // 6: auth.WorkerRecord.employment_history:type_name -> auth.EmploymentHistory
	7,  // 7: auth.WorkerRecord.personal_references:type_name -> auth.PersonalReferences
	8,  // 8: auth.WorkerRecord.emergency_medical:type_name -> auth.EmergencyMedical
	9,  // 9: auth.WorkerRecord.necessary_documents:type_name -> auth.NecessaryDocuments
	10, // 10: auth.WorkerRecord.direct_deposit:type_name -> auth.DirectDeposit
	0,  // 11: auth.AuthUser.GetActiveUser:input_type -> auth.UserRequest
	1,  // 12: auth.AuthUser.GetActiveUser:output_type -> auth.ActiveUser
	12, // [12:13] is the sub-list for method output_type
	11, // [11:12] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_auth_proto_init() }
func file_auth_proto_init() {
	if File_auth_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_auth_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_auth_proto_goTypes,
		DependencyIndexes: file_auth_proto_depIdxs,
		MessageInfos:      file_auth_proto_msgTypes,
	}.Build()
	File_auth_proto = out.File
	file_auth_proto_rawDesc = nil
	file_auth_proto_goTypes = nil
	file_auth_proto_depIdxs = nil
}
