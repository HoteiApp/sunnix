// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthUser_GetActiveUser_FullMethodName = "/auth.AuthUser/GetActiveUser"
)

// AuthUserClient is the client API for AuthUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Definimos el servicio
type AuthUserClient interface {
	// Definimos el método para obtener un usuario activo, que devuelve un ActiveUser
	GetActiveUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ActiveUser, error)
}

type authUserClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthUserClient(cc grpc.ClientConnInterface) AuthUserClient {
	return &authUserClient{cc}
}

func (c *authUserClient) GetActiveUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ActiveUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActiveUser)
	err := c.cc.Invoke(ctx, AuthUser_GetActiveUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthUserServer is the server API for AuthUser service.
// All implementations must embed UnimplementedAuthUserServer
// for forward compatibility.
//
// Definimos el servicio
type AuthUserServer interface {
	// Definimos el método para obtener un usuario activo, que devuelve un ActiveUser
	GetActiveUser(context.Context, *UserRequest) (*ActiveUser, error)
	mustEmbedUnimplementedAuthUserServer()
}

// UnimplementedAuthUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthUserServer struct{}

func (UnimplementedAuthUserServer) GetActiveUser(context.Context, *UserRequest) (*ActiveUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveUser not implemented")
}
func (UnimplementedAuthUserServer) mustEmbedUnimplementedAuthUserServer() {}
func (UnimplementedAuthUserServer) testEmbeddedByValue()                  {}

// UnsafeAuthUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthUserServer will
// result in compilation errors.
type UnsafeAuthUserServer interface {
	mustEmbedUnimplementedAuthUserServer()
}

func RegisterAuthUserServer(s grpc.ServiceRegistrar, srv AuthUserServer) {
	// If the following call pancis, it indicates UnimplementedAuthUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthUser_ServiceDesc, srv)
}

func _AuthUser_GetActiveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServer).GetActiveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUser_GetActiveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServer).GetActiveUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthUser_ServiceDesc is the grpc.ServiceDesc for AuthUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthUser",
	HandlerType: (*AuthUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActiveUser",
			Handler:    _AuthUser_GetActiveUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
